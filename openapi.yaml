openapi: 3.0.3
info:
  title: OpenAPI definition
  version: v0.1

paths:

  ######################### Sign API #########################

  "/v0.1/signature/validate":
    post:
      tags:
        - signature-controller
      description: "Validate personal message signature. Can be used to validate user actions or sign-in"
      operationId: validate
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignatureValidationForm"
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  ######################### Currency API #########################

  "/v0.1/currencies/{currencyId}/rates/usd":
    get:
      tags:
        - currency-controller
      description: "Get currency USD rate by currency id"
      operationId: getCurrencyUsdRateByCurrencyId
      parameters:
        - name: "currencyId"
          in: path
          required: true
          description: "Currency Id, has format `${blockchain}:${token}` or `${blockchain}:${token}:${tokenId}`"
          schema:
            $ref: "#/components/schemas/CurrencyId"
        - name: at
          in: query
          required: true
          description: "Date and time for getting currency USD rate"
          example: "2022-01-01T12:00:00Z"
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CurrencyUsdRate"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  "/v0.1/currencies/all":
    get:
      tags:
        - currency-controller
      description: "Get all registered currencies"
      operationId: getAllCurrencies
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Currencies"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  ######################### Item API #########################

  /v0.1/items/{itemId}:
    get:
      tags:
        - item-controller
      description: "Returns Item by id"
      operationId: getItemById
      parameters:
        - name: "itemId"
          in: path
          required: true
          description: "Item Id, has format `${blockchain}:${token}:${tokenId}`"
          schema:
            $ref: "#/components/schemas/ItemId"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"
        '404':
          $ref: "#/components/responses/EntityNotFound"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  /v0.1/items/byIds:
    post:
      tags:
        - item-controller
      description: "Returns Items by list of ids"
      operationId: getItemByIds
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ItemIds"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Items"
        '404':
          $ref: "#/components/responses/EntityNotFound"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  "/v0.1/items/{itemId}/royalties":
    get:
      tags:
        - item-controller
      description: Returns item royalties by id
      operationId: getItemRoyaltiesById
      parameters:
        - name: "itemId"
          in: path
          required: true
          description: "Item Id, has format `${blockchain}:${token}:${tokenId}`"
          schema:
            $ref: "#/components/schemas/ItemId"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Royalties"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  "/v0.1/items/{itemId}/resetMeta":
    delete:
      tags:
        - item-controller
      description: "Reset and reload Item metadata cache"
      operationId: resetItemMeta
      parameters:
        - name: "itemId"
          in: path
          required: true
          description: "Item id, has format `${blockchain}:${token}:${tokenId}`"
          schema:
            $ref: "#/components/schemas/ItemId"
        - name: "sync"
          in: query
          required: false
          description: "Do not respond until metadata is refreshed if true"
          schema:
            type: boolean

      responses:
        '200':
          description: OK
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  /v0.1/items/sync:
    get:
      tags:
        - item-controller
      description: "Return all items sorted by database update date"
      operationId: syncItems
      parameters:
        - name: "blockchain"
          in: query
          required: true
          description: "Type of the blockchain network"
          schema:
            $ref: "#/components/schemas/Blockchain"
        - name: "nextPage"
          in: query
          required: false
          description: "Token to get the next page of results"
          schema:
            type: string
        - name: "size"
          in: query
          required: false
          description: "The number of items to return"
          schema:
            type: integer
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Items"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  ######################## Order API ########################

  /v0.1/orders/{id}:
    get:
      tags:
        - order-controller
      description: "Returns order by Id"
      operationId: getOrderById
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "Order Id, has format '${blockchain}:${id}'"
          schema:
            $ref: "#/components/schemas/OrderId"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        '404':
          $ref: "#/components/responses/EntityNotFound"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  "/v0.1/orders/byIds":
    post:
      tags:
        - order-controller
      description: "Returns orders by list of ids"
      operationId: getOrdersByIds
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderIds"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Orders"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  /v0.1/orders/sync:
    get:
      tags:
        - order-controller
      description: "Returns all orders sorted by database update date"
      operationId: syncOrders
      parameters:
        - name: "blockchain"
          in: query
          required: true
          description: "Type of the blockchain network"
          schema:
            $ref: "#/components/schemas/Blockchain"
        - name: "nextPage"
          in: query
          required: false
          description: "Token to get the next page of results"
          schema:
            type: string
        - name: "size"
          in: query
          required: false
          description: "The number of items to return"
          schema:
            type: integer
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Orders"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"


  /v1/orders/search:
    post:
      tags:
        - order-controller
      description: "Returns all orders that match the search criteria"
      operationId: searchCollections
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderSearchForm"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Orders"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/EntityNotFound"
        "500":
          $ref: "#/components/responses/ServerError"

      ######################## Activity API ########################

  /v1/activities/sync:
    get:
      tags:
        - activity-controller
      description: "Returns all activities sorted by database update date"
      operationId: syncActivities
      parameters:
        - name: "blockchain"
          in: query
          required: true
          description: "Type of the blockchain network"
          schema:
            $ref: "#/components/schemas/Blockchain"
        - name: "nextPage"
          in: query
          required: false
          description: "Token to get the next page of results"
          schema:
            type: string
        - name: "size"
          in: query
          required: false
          description: "The number of items to return"
          schema:
            type: integer
        - name: "type"
          in: query
          required: false
          description: "Filtering by activities type"
          schema:
            "$ref": "#/components/schemas/SyncType"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Activities"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  /v1/activities:
    post:
      tags:
        - activity-controller
      description: "Returns all activities that match the search criteria"
      operationId: searchActivities
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ActivitySearchForm"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Items"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/EntityNotFound"
        "500":
          $ref: "#/components/responses/ServerError"

####################### Collection API #######################

  /v1/collections/{id}:
    get:
      tags:
        - collection-controller
      description: "Returns collection by address"
      operationId: getCollectionById
      parameters:
        - name: "collection"
          in: path
          required: true
          description: "Address of the collection"
          schema:
            $ref: "#/components/schemas/ContractAddress"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Collection"
        '404':
          $ref: "#/components/responses/EntityNotFound"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  "/v1/collections/{id}/refreshMeta":
    delete:
      tags:
        - collection-controller
      description: "Refreshes metadata for all items in the NFT collection"
      operationId: refreshCollectionMeta
      parameters:
        - name: "collection"
          in: path
          required: true
          description: "Address of the collection"
          schema:
            $ref: "#/components/schemas/ContractAddress"
      responses:
        '200':
          description: OK
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  /v1/collections:
    post:
      tags:
        - collection-controller
      description: "Returns all collections that match the search criteria"
      operationId: searchCollections
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CollectionSearchForm"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Collections"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/EntityNotFound"
        "500":
          $ref: "#/components/responses/ServerError"

  /v1/collections/sync:
    get:
      tags:
        - collection-controller
      description: "Returns all collections sorted by database update date"
      operationId: syncCollections
      parameters:
        - name: "blockchain"
          in: query
          required: true
          description: "Type of the blockchain network"
          schema:
            $ref: "#/components/schemas/Blockchain"
        - name: "nextPage"
          in: query
          required: false
          description: "Token to get the next page of results"
          schema:
            type: string
        - name: "size"
          in: query
          required: false
          description: "The number of items to return"
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Collections"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/ServerError"

  /v1/collections/search:
    post:
      tags:
        - collection-controller
      description: "Returns all collections that match the search criteria"
      operationId: searchCollections
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CollectionSearchForm"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Collections"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/EntityNotFound"
        "500":
          $ref: "#/components/responses/ServerError"

components:
  schemas:

    Platform:
      type: string
      enum:
        - RARIBLE
        - OPEN_SEA
        - CRYPTO_PUNKS
        - IMMUTABLEX
        - HEN
        - OBJKT
        - OTHER

    Blockchain:
      type: string
      description: "Blockchain, has format `${BlockchainType}.${chain}` where chain is chain id or chain name"
      example: "EVM.1 or SOLANA.DEVNET"

    BlockchainType:
      type: string
      enum:
        - EVM
        - FLOW
        - TEZOS
        - SOLANA
        - IMX

    Payout:
      type: object
      properties:
        account:
          $ref: "#/components/schemas/Address"
        value:
          type: integer
      required:
        - account
        - value

    #################### Sign - Union ####################

    SignatureValidationForm:
      required:
        - signer
        - message
        - signature
      type: object
      properties:
        signer:
          $ref: "#/components/schemas/Address"
        publicKey:
          type: string
          description: "The creator's public key"
        message:
          type: string
        signature:
          type: string
          description: "Digital signature of the signer"

    ################## Currency - Union ##################

    CurrencyId:
      type: string
      description: "Currency Id, has format `${blockchain}:${token}` or `${blockchain}:${token}:${tokenId}`"
      example: "${currencyId}"

    CurrencyUsdRate:
      type: object
      required:
        - symbol
        - rate
        - date
      properties:
        currencyId:
          deprecated: true
          type: string
          description: "Currency Id"
          example: "usdc"
        symbol:
          type: string
          description: "Currency Symbol"
          example: "usdc"
        rate:
          $ref: '#/components/schemas/BigDecimal'
        date:
          type: string
          format: date-time
          description: "Date and time of currency USD rate"

    Currency:
      type: object
      properties:
        currencyId:
          $ref: '#/components/schemas/CurrencyId'
        symbol:
          type: string
        alias:
          type: string
          description: "Alias to real coin, 'usd' means 1:1 to USD"
      required:
        - currencyId
        - symbol

    Currencies:
      type: object
      required:
        - currencies
      properties:
        currencies:
          type: array
          items:
            $ref: "#/components/schemas/Currency"

    #################### Meta - Union ####################

    Meta:
      type: object
      properties:
        name:
          type: string
          description: "Name of the NFT item"
        description:
          type: string
          description: "Description of the NFT item"
        createdAt:
          type: string
          format: date-time
        tags:
          type: array
          items:
            type: string
        genres:
          type: array
          items:
            type: string
        language:
          description: "Language in RFC 1176 format"
          type: string
        rights:
          type: string
        rightsUri:
          type: string
        externalUri:
          description: "URI to external page related to the Item"
          type: string
        originalMetaUri:
          description: "URI to the original meta JSON"
          type: string
        attributes:
          type: array
          description: "Attributes of the NFT item"
          items:
            "$ref": "#/components/schemas/MetaAttribute"
        content:
          type: array
          description: "NFT content information"
          items:
            $ref: "#/components/schemas/MetaContent"
      required:
        - name
        - attributes
        - content

    MetaAttribute:
      required:
        - key
      type: object
      properties:
        key:
          type: string
        value:
          type: string
        type:
          type: string
        format:
          type: string

    MetaContent:
      type: object
      properties:
        fileName:
          type: string
        url:
          type: string
        representation:
          type: string
          enum:
            - PREVIEW
            - BIG
            - ORIGINAL
        mimeType:
          type: string
          example: "image/png"
        size:
          type: integer
          format: int64
      required:
        - url
        - representation

      oneOf:
        - $ref: "#/components/schemas/ImageContent"
        - $ref: "#/components/schemas/VideoContent"
        - $ref: "#/components/schemas/AudioContent"
        - $ref: "#/components/schemas/Model3dContent"
        - $ref: "#/components/schemas/HtmlContent"

    ImageContent:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - IMAGE
        width:
          type: integer
        height:
          type: integer

    VideoContent:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - VIDEO
        width:
          type: integer
        height:
          type: integer

    AudioContent:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - AUDIO

    Model3dContent:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - MODEL_3D

    HtmlContent:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - HTML

    #################### Item - Union ####################

    ItemId:
      type: string
      description: "Item Id, has format `${blockchain}:${token}:${tokenId}`"
      example: "${itemId}"

    ItemIds:
      type: object
      required:
        - ids
      properties:
        ids:
          type: array
          description: "List of the item id"
          items:
            $ref: "#/components/schemas/ItemId"

    Item:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ItemId"
        blockchain:
          $ref: "#/components/schemas/Blockchain"
        collection:
          $ref: "#/components/schemas/CollectionId"
        tokenId:
          $ref: "#/components/schemas/BigInteger"
        creators:
          type: array
          description: "Creators of the target item"
          default: [ ]
          items:
            $ref: "#/components/schemas/Creator"
        lazySupply:
          $ref: "#/components/schemas/BigInteger"
        mintedAt:
          type: string
          format: date-time
          description: "Date and time of the item minting"
        lastUpdatedAt:
          type: string
          format: date-time
          description: "Filter condition to return only items that have been updated at this date"
        supply:
          $ref: "#/components/schemas/BigInteger"
        meta:
          $ref: "#/components/schemas/Meta"
        deleted:
          type: boolean
          description: "Item was deleted or not"
        bestSellOrder:
          $ref: "#/components/schemas/Order"
        bestBidOrder:
          $ref: "#/components/schemas/Order"
        auctions:
          type: array
          default: [ ]
          items:
            $ref: "#/components/schemas/Auction"
        totalStock:
          $ref: "#/components/schemas/BigInteger"
        sellers:
          type: integer
          description: "Total count of users selling this item ATM"
        lastSale:
          $ref: "#/components/schemas/ItemLastSale"
      required:
        - id
        - blockchain
        - creators
        - lazySupply
        - mintedAt
        - lastUpdatedAt
        - supply
        - deleted
        - sellers
        - auctions

    ItemSearchForm:
      type: object
      properties:
        nextPage:
          default: null
          description: "Token to get the next page of results"
          type: string
        blockchains:
          default: []
          description: "Type of the blockchain network"
          type: array
          items:
            $ref: "#/components/schemas/Blockchain"
        collections:
          default: []
          description: "Collection Id, has format `${blockchain}:${nativeICollectionId}`"
          type: array
          items:
            $ref: "#/components/schemas/CollectionId"
        creator:
          $ref: "#/components/schemas/Address"
        lazySupply:
          $ref: "#/components/schemas/SearchBigInteger"
        supply:
          $ref: "#/components/schemas/SearchBigInteger"
        mintedAt:
          $ref: "#/components/schemas/SearchDate"
        lastUpdatedAt:
          $ref: "#/components/schemas/SearchDate"
        text:
          description: "The search string parameter, search by name anf description of the item"
          type: string
        trait:
          type: array
          items:
            $ref: "#/components/schemas/ItemsTrait"
        sale:
          default: null
          description: "An object that describes the parameters for searching for items based on information about sell orders"
          type: object
          properties:
            totalStock:
              $ref: "#/components/schemas/SearchBigInteger"
            sellers:
              $ref: "#/components/schemas/SearchBigInteger"
            priceUsd:
              $ref: "#/components/schemas/SearchBigDecimal"
            price:
              default: null
              description: "An object that allows you to search for orders in a given currency"
              type: object
              properties:
                currency:
                  $ref: "#/components/schemas/CurrencyId"
                value:
                  $ref: "#/components/schemas/SearchBigDecimal"

    ItemByOwnersSearchForm:
      type: object
      properties:
        nextPage:
          default: null
          description: "Token to get the next page of results"
          type: string
        blockchains:
          default: []
          description: "Type of the blockchain network"
          type: array
          items:
            $ref: "#/components/schemas/Blockchain"
        owners:
          default: []
          description: "Owners addresses, has format `${blockchainType}:${address}`"
          type: array
          items:
            $ref: "#/components/schemas/Address"
        collections:
          default: []
          description: "Collection Id, has format `${blockchain}:${nativeICollectionId}`"
          type: array
          items:
            $ref: "#/components/schemas/CollectionId"
        mintedAt:
          $ref: "#/components/schemas/SearchDate"
        lastUpdatedAt:
          $ref: "#/components/schemas/SearchDate"
        text:
          description: "The search string parameter, search by name anf description of the item"
          type: string
        trait:
          type: array
          items:
            $ref: "#/components/schemas/ItemsTrait"
        sale:
          default: null
          description: "An object that describes the parameters for searching for items based on information about sell orders"
          type: object
          properties:
            totalStock:
              $ref: "#/components/schemas/SearchBigInteger"
            sellers:
              $ref: "#/components/schemas/SearchBigInteger"
            priceUsd:
              $ref: "#/components/schemas/SearchBigDecimal"
            price:
              default: null
              description: "An object that allows you to search for orders in a given currency"
              type: object
              properties:
                currency:
                  $ref: "#/components/schemas/CurrencyId"
                value:
                  $ref: "#/components/schemas/SearchBigDecimal"

    ItemsTrait:
      type: object
      properties:
        key:
          type: string
        values:
          type: array
          items:
            type: string

    ItemLastSale:
      type: object
      properties:
        date:
          type: string
          format: date-time
        seller:
          $ref: "#/components/schemas/Address"
        buyer:
          $ref: "#/components/schemas/Address"
        value:
          $ref: "#/components/schemas/BigDecimal"
        currency:
          $ref: "#/components/schemas/AssetType"
        price:
          $ref: "#/components/schemas/BigDecimal"
      required:
        - date
        - from
        - to
        - value
        - currency
        - price

    ItemWithOwnership:
      type: object
      properties:
        item:
          $ref: "#/components/schemas/Item"
        ownership:
          $ref: "#/components/schemas/ItemOwnership"
      required:
        - item
        - ownership

    Items:
      type: object
      properties:
        total:
          deprecated: true
          type: integer
          format: int64
          description: "Number of items were found by request"
        nextPage:
          type: string
          description: "Token to get the next page of results"
        items:
          type: array
          description: "List of found items"
          default: [ ]
          items:
            $ref: "#/components/schemas/Item"
      required:
        - items

    ItemOwner:
      type: object
      properties:
        owner:
          $ref: "#/components/schemas/Address"
        quantity:
          $ref: "#/components/schemas/BigInteger"

    ItemOwners:
      type: object
      properties:
        itemOwners:
          $ref: "#/components/schemas/ItemOwner"

    ItemsWithOwnership:
      type: object
      properties:
        total:
          deprecated: true
          type: integer
          format: int64
          description: "Number of items were found by request"
        nextPage:
          type: string
          description: "Token to get the next page of results"
        items:
          type: array
          description: "List of found items"
          default: [ ]
          items:
            $ref: "#/components/schemas/ItemWithOwnership"
      required:
        - items

    CollectionActivity:
      type: object
      properties:
        collectionId:
          $ref: "#/components/schemas/CollectionId"
        activityId:
          type: string
      required:
        - activityId
        - collectionId
      oneOf:
        - $ref: "#/components/schemas/CollectionUpdateActivity"

    CollectionUpdateActivity:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - UPDATE
        collection:
          $ref: "#/components/schemas/Collection"
      required:
        - "@type"
        - collection

    ItemActivity:
      type: object
      properties:
        itemId:
          $ref: "#/components/schemas/ItemId"
        activityId:
          type: string
      required:
        - activityId
        - itemId
      oneOf:
        - $ref: "#/components/schemas/ItemUpdateActivity"
        - $ref: "#/components/schemas/ItemDeleteActivity"

    ItemUpdateActivity:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - UPDATE
        item:
          $ref: "#/components/schemas/Item"
      required:
        - "@type"
        - item

    ItemDeleteActivity:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - DELETE
      required:
        - "@type"
        - itemId

    #################### Trait - Union ####################
    Traits:
      type: object
      properties:
        nextPage:
          type: string
          description: "Token to get the next page of results"
        traits:
          type: array
          description: "List of found traits"
          default: [ ]
          items:
            $ref: "#/components/schemas/Trait"
      required:
        - traits
    Trait:
      title: Trait
      type: object
      description: Combination of Item attribute key with list of values
      required:
        - key
        - values
      properties:
        key:
          $ref: '#/components/schemas/TraitEntry'
        values:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/TraitEntry'

    TraitEntry:
      title: TraitEntry
      type: object
      description: Combination of Item attribute key/value with it's count
      required:
        - value
        - count
      properties:
        value:
          type: string
        count:
          type: integer
          format: int64

    TraitsRarityRequest:
      title: TraitsRarityRequest
      type: object
      description: Request rarity of the properties in the collection
      required:
        - collectionId
        - properties
      properties:
        collectionId:
          type: string
        properties:
          type: array
          items:
            $ref: '#/components/schemas/TraitProperty'

    TraitProperty:
      title: TraitProperty
      type: object
      description: Item trait property
      required:
        - key
        - value
      properties:
        key:
          type: string
        value:
          type: string

    ExtendedTraitProperty:
      title: ExtendedTraitProperty
      type: object
      description: Trait property parameters with additional features
      required:
        - key
        - value
        - rarity
      properties:
        key:
          type: string
        value:
          type: string
        rarity:
          type: number
          format: bigdecimal
          description: Rarity percent

    ExtendedTraitProperties:
      type: object
      properties:
        nextPage:
          type: string
          description: "Token to get the next page of results"
        traits:
          type: array
          description: "List of ExtendedTraitProperty"
          default: [ ]
          items:
            $ref: "#/components/schemas/ExtendedTraitProperty"
      required:
        - traits


    #################### Ownership - Union ####################

    OwnershipId:
      type: string
      example: "${ownershipId}"

    OwnershipIds:
      type: object
      required:
        - ids
      properties:
        ids:
          type: array
          description: "List of the Ownerhips ids"
          items:
            $ref: "#/components/schemas/OwnershipId"

    Ownership:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/OwnershipId"
        blockchain:
          $ref: "#/components/schemas/Blockchain"
        itemId:
          $ref: "#/components/schemas/ItemId"
        collection:
          $ref: "#/components/schemas/CollectionId"
        owner:
          $ref: "#/components/schemas/Address"
        source:
          $ref: "#/components/schemas/OwnershipSource"
        value:
          $ref: "#/components/schemas/BigInteger"
        lazyValue:
          $ref: "#/components/schemas/BigInteger"
        createdAt:
          type: string
          format: "date-time"
        lastUpdatedAt:
          type: string
          format: "date-time"
        auction:
          $ref: "#/components/schemas/Auction"
        bestSellOrder:
          $ref: "#/components/schemas/Order"
        bestBidOrder:
          $ref: "#/components/schemas/Order"
      required:
        - id
        - blockchain
        - owner
        - value
        - createdAt
        - lazyValue

    OwnershipSource:
      type: string
      enum:
        - MINT
        - PURCHASE
        - TRANSFER

    ItemOwnership:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/OwnershipId"
        blockchain:
          $ref: "#/components/schemas/Blockchain"
        collection:
          $ref: "#/components/schemas/CollectionId"
        owner:
          $ref: "#/components/schemas/Address"
        value:
          $ref: "#/components/schemas/BigInteger"
        createdAt:
          type: string
          format: "date-time"
        creators:
          type: array
          description: "Creators of the target item"
          default: [ ]
          items:
            $ref: "#/components/schemas/Creator"
        lazyValue:
          $ref: "#/components/schemas/BigInteger"
      required:
        - id
        - blockchain
        - collection
        - owner
        - value
        - createdAt
        - creators
        - lazyValue

    ItemHistory:
      type: object
      properties:
        owner:
          "$ref": "#/components/schemas/Address"
        contract:
          "$ref": "#/components/schemas/ContractAddress"
        tokenId:
          "$ref": "#/components/schemas/BigInteger"
        value:
          "$ref": "#/components/schemas/BigInteger"
        date:
          type: string
          format: date-time
      description: History of item
      required:
        - contract
        - tokenId
        - date
      oneOf:
        - "$ref": "#/components/schemas/ItemRoyalty"
        - "$ref": "#/components/schemas/ItemTransfer"

    ItemRoyalty:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - ROYALTY
        royalties:
          type: array
          default: [ ]
          items:
            "$ref": "#/components/schemas/Royalty"
      required:
        - "@type"
        - royalties

    ItemTransfer:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - TRANSFER
        from:
          "$ref": "#/components/schemas/Address"
      required:
        - "@type"
        - owner
        - value
        - from

    Royalty:
      type: object
      properties:
        account:
          $ref: "#/components/schemas/Address"
        value:
          type: integer
      required:
        - account
        - value

    Royalties:
      type: object
      properties:
        royalties:
          type: array
          items:
            $ref: "#/components/schemas/Royalty"
      required:
        - royalties

    Creator:
      type: object
      properties:
        account:
          $ref: "#/components/schemas/Address"
        value:
          type: integer
      required:
        - account
        - value

    Ownerships:
      type: object
      properties:
        total:
          deprecated: true
          type: integer
          format: int64
          description: "Number of ownerships were found by request"
        nextPage:
          type: string
          description: "Token to get the next page of results"
        ownerships:
          type: array
          default: [ ]
          description: "List of found ownerships"
          items:
            $ref: "#/components/schemas/Ownership"
      required:
        - ownerships

    OwnershipActivity:
      type: object
      properties:
        ownershipId:
          $ref: "#/components/schemas/OwnershipId"
        activityId:
          type: string
      required:
        - ownershipId
        - activityId
      oneOf:
        - $ref: "#/components/schemas/OwnershipUpdateActivity"
        - $ref: "#/components/schemas/OwnershipDeleteActivity"

    OwnershipUpdateActivity:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - UPDATE
        ownership:
          $ref: "#/components/schemas/Ownership"
      required:
        - "@type"
        - ownership

    OwnershipDeleteActivity:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - DELETE
      required:
        - "@type"

    OwnershipSearchRequest:
      title: "OwnershipSearchQuery"
      type: object
      description: "Ownerships complex search query"
      required:
        - size
        - filter
      properties:
        size:
          minimum: 1
          maximum: 1000
          default: 50
          type: integer
          format: int32
          description: "Number of entities returned"
        nextPage:
          type: string
          description: "Token to get the next page of results"
        filter:
          $ref: "#/components/schemas/OwnershipSearchFilter"

    OwnershipSearchFilter:
      type: object
      description: "Filter for ownerships search query"
      properties:
        blockchains:
          type: array
          items:
            $ref: "#/components/schemas/Blockchain"
        owners:
          type: array
          items:
            $ref: "#/components/schemas/Address"
        collections:
          type: array
          items:
            $ref: "#/components/schemas/CollectionId"
        items:
          type: array
          items:
            $ref: "#/components/schemas/ItemId"
        auctions:
          type: array
          items:
            $ref: "#/components/schemas/AuctionId"
        auctionsOwners:
          type: array
          items:
            $ref: "#/components/schemas/Address"
        beforeDate:
          type: string
          format: date-time
        afterDate:
          type: string
          format: date-time

    #################### Order - Union ####################

    OrderSearchForm:
      type: object
      properties:
        nextPage:
          default: null
          description: "Token to get the next page of results"
          type: string
        blockchains:
          default: [ ]
          description: "Allows you to limit the search to selected blockchains"
          type: array
          items:
            $ref: "#/components/schemas/Blockchain"
        types:
          default: null
          description: "Allows you to limit the search to selected order types"
          type: array
          items:
            $ref: "#/components/schemas/OrderType"
        platforms:
          default: null
          description: "Allows you to limit the search to selected platforms"
          type: array
          items:
            $ref: "#/components/schemas/Platform"
        origins:
          default: null
          description: "Allows you to limit the search to selected origins"
          type: array
          items:
            $ref: "#/components/schemas/Platform"
        statuses:
          default: null
          description: "Allows you to limit the search to selected statuses"
          type: array
          items:
            $ref: "#/components/schemas/OrderStatus"
        collections:
          default: null
          description: "Allows you to limit the search to selected collections"
          type: array
          items:
            $ref: "#/components/schemas/Collection"
        itemIds:
          default: null
          description: "Allows you to limit the search to selected itemIds"
          type: array
          items:
            $ref: "#/components/schemas/ItemId"
        makers:
          default: null
          description: "Allows you to limit the search to selected makers"
          type: array
          items:
            $ref: "#/components/schemas/Address"
        startAt:
          $ref: "#/components/schemas/SearchDate"
        endAt:
          $ref: "#/components/schemas/SearchDate"
        currencies:
          default: null
          description: "Allows you to limit the search to selected currencies"
          type: array
          items:
            $ref: "#/components/schemas/ContractAddress"
        prices:
          $ref: "#/components/schemas/SearchBigDecimal"
        pricesUSD:
          $ref: "#/components/schemas/SearchBigDecimal"

    OrderId:
      type: string
      example: "${orderId}"

    OrderIds:
      type: object
      required:
        - ids
      properties:
        ids:
          type: array
          description: "Array of the orders Ids in format '${blockchain}:${id}'"
          items:
            type: string

    Order:
      type: object
      properties:
        type:
          $ref: "#/components/schemas/OrderType"
        id:
          $ref: "#/components/schemas/OrderId"
        fill:
          $ref: "#/components/schemas/BigDecimal"
        platform:
          $ref: "#/components/schemas/Platform"
        status:
          $ref: "#/components/schemas/OrderStatus"
        startedAt:
          type: string
          format: "date-time"
        endedAt:
          type: string
          format: "date-time"
        nftStock:
          $ref: "#/components/schemas/BigDecimal"
        cancelled:
          type: "boolean"
        createdAt:
          type: string
          format: "date-time"
        lastUpdatedAt:
          type: string
          format: "date-time"
        dbUpdatedAt:
          type: string
          format: "date-time"
        currency:
          $ref: "#/components/schemas/ContractAddress"
        price:
          $ref: "#/components/schemas/BigDecimal"
        priceUsd:
          $ref: "#/components/schemas/BigDecimal"
        maker:
          $ref: "#/components/schemas/Address"
        taker:
          $ref: "#/components/schemas/Address"
        nft:
          $ref: "#/components/schemas/Asset"
        salt:
          type: string
        signature:
          type: string
        data:
          $ref: "#/components/schemas/OrderData"
      required:
        - id
        - platform
        - status
        - fill
        - nftStock
        - cancelled
        - createdAt
        - lastUpdatedAt
        - type
        - maker
        - nft
        - currency
        - price
        - salt
        - data

    OrderType:
      type: string
      enum:
        - BID
        - SELL

    OrderData:
      type: object
      oneOf:
        - "$ref": "#/components/schemas/EthOrderDataLegacy"
        - "$ref": "#/components/schemas/EthOrderDataRaribleV2DataV1"
        - "$ref": "#/components/schemas/EthOrderDataRaribleV2DataV3Sell"
        - "$ref": "#/components/schemas/EthOrderDataRaribleV2DataV3Buy"
        - "$ref": "#/components/schemas/EthOrderOpenSeaV1DataV1"
        - "$ref": "#/components/schemas/EthOrderSeaportDataV1"
        - "$ref": "#/components/schemas/EthOrderCryptoPunksData"
        - "$ref": "#/components/schemas/TezosOrderDataRaribleV2DataV1"
        - "$ref": "#/components/schemas/TezosOrderDataRaribleV2DataV2"
        - "$ref": "#/components/schemas/FlowOrderDataV1"
        - "$ref": "#/components/schemas/SolanaAuctionHouseDataV1"
        - "$ref": "#/components/schemas/ImmutablexOrderDataV1"

    Orders:
      type: object
      properties:
        nextPage:
          type: string
          description: "Token to get the next page of results"
        orders:
          type: array
          description: "List of found orders"
          default: [ ]
          items:
            $ref: "#/components/schemas/Order"
      required:
        - orders

    OrderActivity:
      type: object
      properties:
        orderId:
          "$ref": "#/components/schemas/OrderId"
        activityId:
          type: string
      required:
        - orderId
        - activityId
      oneOf:
        - "$ref": "#/components/schemas/OrderUpdateActivity"

    OrderUpdateActivity:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - UPDATE
        order:
          "$ref": "#/components/schemas/Order"
      required:
        - "@type"
        - order

    OrderStatus:
      type: string
      enum:
        - ACTIVE
        - FILLED
        - HISTORICAL
        - INACTIVE
        - CANCELLED

    OrderSort:
      type: string
      enum:
        - LAST_UPDATE_ASC
        - LAST_UPDATE_DESC

    #################### Auction - Union ####################

    AuctionId:
      type: string
      example: "${blockchain}:${id}"

    AuctionHistory:
      type: object
      required:
        - hash
      properties:
        hash:
          type: string

    AuctionStatus:
      type: string
      enum:
        - ACTIVE
        - CANCELLED
        - FINISHED

    RaribleAuctionV1BidDataV1:
      type: object
      required:
        - originFees
        - payouts
      properties:
        dataType:
          type: string
          description: "Data type of the auction bid data"
          enum:
            - RARIBLE_AUCTION_V1_BID_DATA_V1
        originFees:
          type: array
          description: "Value of the origin fees for the auction bid data"
          items:
            "$ref": "#/components/schemas/Payout"
        payouts:
          type: array
          description: "Value of the payouts for the auction bid data"
          items:
            "$ref": "#/components/schemas/Payout"

    AuctionBidData:
      type: object
      oneOf:
        - "$ref": "#/components/schemas/RaribleAuctionV1BidDataV1"

    AuctionBid:
      type: object
      required:
        - buyer
        - amount
        - date
        - status
      properties:
        buyer:
          $ref: "#/components/schemas/Address"
        amount:
          $ref: "#/components/schemas/BigDecimal"
        date:
          type: string
          format: date-time
        status:
          type: string
          enum:
            - ACTIVE
            - HISTORICAL
      oneOf:
        - "$ref": "#/components/schemas/RaribleAuctionV1BidV1"

    RaribleAuctionV1BidV1:
      type: object
      required:
        - data
      properties:
        type:
          type: string
          description: "Type of the auction bid"
          enum:
            - RARIBLE_AUCTION_V1_BID_V1
        data:
          $ref: "#/components/schemas/RaribleAuctionV1BidDataV1"

    AuctionSort:
      type: string
      enum:
        - LAST_UPDATE_ASC
        - LAST_UPDATE_DESC
        - BUY_PRICE_ASC

    AuctionData:
      type: object
      oneOf:
        - "$ref": "#/components/schemas/RaribleAuctionV1DataV1"

    RaribleAuctionV1DataV1:
      type: object
      required:
        - originFees
        - payouts
        - duration
      properties:
        dataType:
          type: string
          description: "Data type of the auction"
          enum:
            - RARIBLE_AUCTION_V1_DATA_V1
        originFees:
          type: array
          description: "Value of the origin fees for the auction"
          items:
            "$ref": "#/components/schemas/Payout"
        payouts:
          type: array
          description: "Value of the payouts for the auction"
          items:
            "$ref": "#/components/schemas/Payout"
        startTime:
          type: string
          format: date-time
        duration:
          $ref: "#/components/schemas/BigInteger"
        buyOutPrice:
          $ref: "#/components/schemas/BigDecimal"

    Auction:
      type: object
      required:
        - id
        - contract
        - seller
        - sell
        - buy
        - minimalStep
        - minimalPrice
        - createdAt
        - lastUpdateAt
        - status
        - ongoing
        - hash
        - auctionId
        - data
      properties:
        id:
          $ref: "#/components/schemas/AuctionId"
        contract:
          $ref: "#/components/schemas/ContractAddress"
        type:
          type: string
          enum:
            - RARIBLE_AUCTION_V1
        seller:
          $ref: "#/components/schemas/Address"
        sell:
          $ref: "#/components/schemas/Asset"
        buy:
          $ref: "#/components/schemas/AssetType"
        endTime:
          type: string
          format: date-time
        minimalStep:
          $ref: "#/components/schemas/BigDecimal"
        minimalPrice:
          $ref: "#/components/schemas/BigDecimal"
        createdAt:
          type: string
          format: date-time
        lastUpdateAt:
          type: string
          format: date-time
        buyPrice:
          $ref: "#/components/schemas/BigDecimal"
        buyPriceUsd:
          $ref: "#/components/schemas/BigDecimal"
        status:
          $ref: "#/components/schemas/AuctionStatus"
        ongoing:
          type: boolean
        hash:
          type: string
        auctionId:
          $ref: "#/components/schemas/BigInteger"
        lastBid:
          $ref: "#/components/schemas/AuctionBid"
        data:
          $ref: "#/components/schemas/AuctionData"

    RaribleAuctionV1:
      type: object
      required:
        - auctionId
        - data
      properties:
        type:
          type: string
          enum:
            - RARIBLE_AUCTION_V1
        auctionId:
          $ref: "#/components/schemas/BigInteger"
        lastBid:
          $ref: "#/components/schemas/RaribleAuctionV1BidV1"
        data:
          $ref: "#/components/schemas/RaribleAuctionV1DataV1"

    Auctions:
      type: object
      properties:
        total:
          deprecated: true
          type: integer
          format: int64
          description: "Number of auctions were found by request"
        nextPage:
          type: string
          description: "Token to get the next page of results"
        auctions:
          type: array
          description: "List of found auctions"
          default: [ ]
          items:
            $ref: "#/components/schemas/Auction"
      required:
        - auctions

    AuctionBids:
      type: object
      properties:
        total:
          deprecated: true
          type: integer
          format: int64
          description: "Number of auction bids were found by request"
        nextPage:
          type: string
          description: "Token to get the next page of results"
        bids:
          type: array
          description: "List of found auction bids"
          default: [ ]
          items:
            $ref: "#/components/schemas/AuctionBid"
      required:
        - bids

    #################### Activity - Union ####################

    ActivityId:
      type: string
      example: "${blockchain}:${id}"

    ActivitySort:
      type: string
      enum:
        - LATEST_FIRST
        - EARLIEST_FIRST

    SyncType:
      type: string
      enum:
        - ORDER
        - NFT
        - AUCTION

    ActivityType:
      type: string
      enum:
        - TRANSFER
        - MINT
        - BURN
        - BID
        - LIST
        - SELL
        - CANCEL_LIST
        - CANCEL_BID
        - AUCTION_BID
        - AUCTION_CREATED
        - AUCTION_CANCEL
        - AUCTION_FINISHED
        - AUCTION_STARTED
        - AUCTION_ENDED

    UserActivityType:
      type: string
      enum:
        - TRANSFER
        - MINT
        - BURN
        - MAKE_BID
        - GET_BID
        - LIST
        - BUY
        - SELL
        - CANCEL_LIST
        - CANCEL_BID
        - AUCTION_BID
        - AUCTION_CREATED
        - AUCTION_CANCEL
        - AUCTION_FINISHED
        - AUCTION_STARTED
        - AUCTION_ENDED

    ActivitySearchForm:
      type: object
      properties:
        nextPage:
          default: null
          description: "Token to get the next page of results"
          type: string
        types:
          default: [MINT, TRANSFER, BURN, MAKE_BID, GET_BID, LIST, BUY, SELL, CANCEL_LIST, CANCEL_BID,
                    AUCTION_BID, AUCTION_CREATED, AUCTION_CANCEL, AUCTION_FINISHED, AUCTION_STARTED, AUCTION_ENDED]
          description: "Array of activities"
          type: array
          items:
            $ref: "#/components/schemas/UserActivityType"
        users:
          default: null
          description: "Array of users"
          type: array
          items:
            $ref: "#/components/schemas/Address"
        collections:
          default: null
          description: "Array of collections"
          type: array
          items:
            $ref: "#/components/schemas/CollectionId"
        items:
          default: null
          description: "Array of items"
          type: array
          items:
            $ref: "#/components/schemas/ItemId"
        createdAt:
          $ref: "#/components/schemas/SearchDate"
        lastUpdateAt:
          $ref: "#/components/schemas/SearchDate"

    Activity:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ActivityId"
        date:
          type: string
          format: "date-time"
        lastUpdatedAt:
          type: string
          format: "date-time"
        reverted:
          type: boolean
      oneOf:
        - $ref: "#/components/schemas/MintActivity"
        - $ref: "#/components/schemas/BurnActivity"
        - $ref: "#/components/schemas/TransferActivity"
        - $ref: "#/components/schemas/OrderMatchActivity"
        - $ref: "#/components/schemas/OrderBidActivity"
        - $ref: "#/components/schemas/OrderListActivity"
        - $ref: "#/components/schemas/OrderCancelBidActivity"
        - $ref: "#/components/schemas/OrderCancelListActivity"
        - $ref: "#/components/schemas/AuctionOpenActivity"
        - $ref: "#/components/schemas/AuctionBidActivity"
        - $ref: "#/components/schemas/AuctionFinishActivity"
        - $ref: "#/components/schemas/AuctionCancelActivity"
        - $ref: "#/components/schemas/AuctionStartActivity"
        - $ref: "#/components/schemas/AuctionEndActivity"
        - $ref: "#/components/schemas/L2DepositActivity"
        - $ref: "#/components/schemas/L2WithdrawalActivity"
      required:
        - id
        - date

    MintActivity:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - MINT
        owner:
          $ref: "#/components/schemas/Address"
        collection:
          $ref: "#/components/schemas/CollectionId"
        itemId:
          $ref: "#/components/schemas/ItemId"
        value:
          $ref: "#/components/schemas/BigInteger"
        transactionHash:
          type: string
        blockchainInfo:
          $ref: "#/components/schemas/ActivityBlockchainInfo"
      required:
        - "@type"
        - owner
        - value
        - transactionHash

    BurnActivity:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - BURN
        owner:
          $ref: "#/components/schemas/Address"
        collection:
          $ref: "#/components/schemas/CollectionId"
        itemId:
          $ref: "#/components/schemas/ItemId"
        value:
          $ref: "#/components/schemas/BigInteger"
        transactionHash:
          type: string
        blockchainInfo:
          $ref: "#/components/schemas/ActivityBlockchainInfo"
      required:
        - "@type"
        - owner
        - value
        - transactionHash

    TransferActivity:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - TRANSFER
        from:
          $ref: "#/components/schemas/Address"
        owner:
          $ref: "#/components/schemas/Address"
        collection:
          $ref: "#/components/schemas/CollectionId"
        itemId:
          $ref: "#/components/schemas/ItemId"
        value:
          $ref: "#/components/schemas/BigInteger"
        purchase:
          type: boolean
        transactionHash:
          type: string
        blockchainInfo:
          $ref: "#/components/schemas/ActivityBlockchainInfo"
      required:
        - "@type"
        - from
        - owner
        - value
        - transactionHash

    OrderActivitySource:
      type: string
      enum:
        - RARIBLE
        - OPEN_SEA
        - CRYPTO_PUNKS
        - IMMUTABLEX
        - HEN
        - OBJKT

    OrderActivityMatchSide:
      type: object
      properties:
        maker:
          $ref: "#/components/schemas/Address"
        hash:
          type: string
        asset:
          $ref: "#/components/schemas/Asset"
      required:
        - maker
        - asset

    OrderMatchActivity:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - MATCH
        source:
          $ref: "#/components/schemas/OrderActivitySource"
        transactionHash:
          type: string
        blockchainInfo:
          $ref: "#/components/schemas/ActivityBlockchainInfo"
      required:
        - source
        - transactionHash
      oneOf:
        - $ref: "#/components/schemas/OrderMatchSwap"
        - $ref: "#/components/schemas/OrderMatchSell"

    OrderMatchSwap:
      type: object
      required: [make, take]
      properties:
        "@type":
          type: string
          enum:
            - SWAP
        make:
          $ref: "#/components/schemas/OrderActivityMatchSide"
        take:
          $ref: "#/components/schemas/OrderActivityMatchSide"

    OrderMatchSell:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - SELL
        make:
          $ref: "#/components/schemas/Asset"
        take:
          $ref: "#/components/schemas/Asset"
        maker:
          $ref: "#/components/schemas/Address"
        taker:
          $ref: "#/components/schemas/Address"
        makerOrderHash:
          type: string
        takerOrderHash:
          type: string
        price:
          $ref: "#/components/schemas/BigDecimal"
        priceUsd:
          $ref: "#/components/schemas/BigDecimal"
        amountUsd:
          $ref: "#/components/schemas/BigDecimal"
        type:
          type: string
          enum:
            - SELL
            - ACCEPT_BID
      required:
        - make
        - take
        - maker
        - taker
        - price
        - type

    OrderBidActivity:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - BID
        hash:
          type: string
        maker:
          $ref: "#/components/schemas/Address"
        make:
          $ref: "#/components/schemas/Asset"
        take:
          $ref: "#/components/schemas/Asset"
        price:
          $ref: "#/components/schemas/BigDecimal"
        priceUsd:
          $ref: "#/components/schemas/BigDecimal"
        source:
          $ref: "#/components/schemas/OrderActivitySource"
      required:
        - "@type"
        - hash
        - maker
        - make
        - take
        - price

    OrderListActivity:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - LIST
        hash:
          type: string
        maker:
          $ref: "#/components/schemas/Address"
        make:
          $ref: "#/components/schemas/Asset"
        take:
          $ref: "#/components/schemas/Asset"
        price:
          $ref: "#/components/schemas/BigDecimal"
        priceUsd:
          $ref: "#/components/schemas/BigDecimal"
        source:
          $ref: "#/components/schemas/OrderActivitySource"
      required:
        - "@type"
        - hash
        - maker
        - make
        - take
        - price

    OrderCancelBidActivity:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - CANCEL_BID
        hash:
          type: string
        maker:
          $ref: "#/components/schemas/Address"
        make:
          $ref: "#/components/schemas/AssetType"
        take:
          $ref: "#/components/schemas/AssetType"
        source:
          $ref: "#/components/schemas/OrderActivitySource"
        transactionHash:
          type: string
        blockchainInfo:
          $ref: "#/components/schemas/ActivityBlockchainInfo"
      required:
        - "@type"
        - hash
        - maker
        - make
        - take
        - transactionHash

    OrderCancelListActivity:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - CANCEL_LIST
        hash:
          type: string
        maker:
          $ref: "#/components/schemas/Address"
        make:
          $ref: "#/components/schemas/AssetType"
        take:
          $ref: "#/components/schemas/AssetType"
        source:
          $ref: "#/components/schemas/OrderActivitySource"
        transactionHash:
          type: string
        blockchainInfo:
          $ref: "#/components/schemas/ActivityBlockchainInfo"
      required:
        - "@type"
        - hash
        - maker
        - make
        - take
        - transactionHash

    AuctionActivitySource:
      type: string
      enum:
        - RARIBLE

    AuctionOpenActivity:
      type: object
      required:
        - "@type"
        - auction
        - transactionHash
      properties:
        "@type":
          type: string
          enum:
            - "auction_open"
        auction:
          $ref: "#/components/schemas/Auction"
        transactionHash:
          type: string

    AuctionBidActivity:
      type: object
      required:
        - "@type"
        - auction
        - bid
        - transactionHash
      properties:
        "@type":
          type: string
          enum:
            - "auction_bid"
        auction:
          $ref: "#/components/schemas/Auction"
        bid:
          $ref: "#/components/schemas/AuctionBid"
        transactionHash:
          type: string

    AuctionFinishActivity:
      type: object
      required:
        - "@type"
        - auction
        - transactionHash
      properties:
        "@type":
          type: string
          enum:
            - "auction_finish"
        auction:
          $ref: "#/components/schemas/Auction"
        transactionHash:
          type: string

    AuctionCancelActivity:
      type: object
      required:
        - "@type"
        - auction
        - transactionHash
      properties:
        "@type":
          type: string
          enum:
            - "auction_cancel"
        auction:
          $ref: "#/components/schemas/Auction"
        transactionHash:
          type: string

    AuctionStartActivity:
      type: object
      required:
        - "@type"
        - auction
      properties:
        "@type":
          type: string
          enum:
            - "auction_start"
        auction:
          $ref: "#/components/schemas/Auction"

    AuctionEndActivity:
      type: object
      required:
        - "@type"
        - auction
      properties:
        "@type":
          type: string
          enum:
            - "auction_end"
        auction:
          $ref: "#/components/schemas/Auction"

    L2DepositActivity:
      type: object
      required:
        - "@type"
        - user
        - status
        - itemId
      properties:
        "@type":
          type: string
          enum:
            - L2_DEPOSIT
        user:
          $ref: "#/components/schemas/Address"
        status:
          type: string
        itemId:
          $ref: "#/components/schemas/ItemId"
        value:
          $ref: "#/components/schemas/BigInteger"

    L2WithdrawalActivity:
      type: object
      required:
        - "@type"
        - user
        - status
        - itemId
      properties:
        "@type":
          type: string
          enum:
            - L2_WITHDRAWAL
        user:
          $ref: "#/components/schemas/Address"
        status:
          type: string
        itemId:
          $ref: "#/components/schemas/ItemId"
        value:
          $ref: "#/components/schemas/BigInteger"

    Activities:
      type: object
      properties:
        nextPage:
          type: string
          description: "Token to get the next page of results"
        activities:
          type: array
          default: [ ]
          description: "List of found activities"
          items:
            $ref: "#/components/schemas/Activity"
      required:
        - activities

    CollectionId:
      type: string
      description: "Collection Id, has format `${blockchain}:${nativeICollectionId}`"
      example: "${collectionId}"

    Collection:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/CollectionId"
        parent:
          $ref: "#/components/schemas/CollectionId"
        blockchainType:
          $ref: "#/components/schemas/BlockchainType"
        chain:
          type: string
        type:
          $ref: "#/components/schemas/CollectionType"
        owner:
          $ref: "#/components/schemas/Address"
        minters:
          type: array
          description: "List of addresses that can mint items in this collection"
          items:
            "$ref": "#/components/schemas/Address"
        meta:
          "$ref": "#/components/schemas/CollectionMeta"
        bestBidOrder:
          $ref: "#/components/schemas/Order"
        bestSellOrder:
          $ref: "#/components/schemas/Order"
      required:
        - id
        - blockchain
        - name
        - type
        - features

    CollectionType:
      type: string
      enum:
        - SINGLE
        - MULTIPLE

    Collections:
      type: object
      properties:
        total:
          deprecated: true
          type: integer
          format: int64
          description: "Number of collections were found by request"
        nextPage:
          type: string
          description: "Token to get the next page of results"
        collections:
          default: [ ]
          type: array
          items:
            $ref: "#/components/schemas/Collection"
      required:
        - collections

    CollectionMeta:
      required:
        - name
        - content
      type: object
      properties:
        name:
          type: string
          description: "Name of the collection"
        symbol:
          type: string
          description: "An abbreviated name for NFTs in this collection"
        description:
          type: string
          description: "Description of the collection"
        createdAt:
          type: string
          format: date-time
        tags:
          type: array
          items:
            type: string
        genres:
          type: array
          items:
            type: string
        language:
          description: "Language in RFC 1176 format"
          type: string
        rights:
          type: string
        rightsUri:
          type: string
        externalUri:
          description: "URI to external page related to the collection"
          type: string
        originalMetaUri:
          description: "URI to the original meta JSON"
          type: string
        content:
          default: [ ]
          type: array
          items:
            "$ref": "#/components/schemas/MetaContent"
        externalLink:
          type: string
          description: "External link to the original website for the collection"
        sellerFeeBasisPoints:
          type: integer
          format: int32
          description: "Indicates a 1% seller fee"
        feeRecipient:
          description: "Where seller fees will be paid to"
          "$ref": "#/components/schemas/Address"

    CollectionSearchForm:
      type: object
      properties:
        nextPage:
          default: null
          description: "Token to get the next page of results"
          type: string
        blockchains:
          default: []
          description: "Allows you to limit the search to selected blockchains"
          type: array
          items:
            $ref: "#/components/schemas/Blockchain"
        types:
          default: []
          description: "Allows you to find collections by type"
          type: array
          items:
            $ref: "#/components/schemas/CollectionType"
        owners:
          default: []
          description: "Allows you to find collections owned by specific addresses"
          type: array
          items:
            $ref: "#/components/schemas/Address"
        minters:
          default: []
          description: "Allows you to find private collections where specific minter can mint tokens"
          type: array
          items:
            $ref: "#/components/schemas/Address"
        text:
          description: "The search string parameter, search by name, symbol and description of the collection"
          type: string

    ActivityBlockchainInfo:
      type: object
      deprecated: true
      properties:
        transactionHash:
          type: string
        blockHash:
          type: string
        blockNumber:
          type: integer
          format: int64
        logIndex:
          type: integer
      required:
        - transactionHash
        - blockHash
        - blockNumber
        - logIndex

    #################### Union - Errors ####################

    UnionApiErrorEntityNotFound:
      required:
        - code
        - message
      type: object
      properties:
        code:
          type: string
          enum:
            - NOT_FOUND
          default: NOT_FOUND
        message:
          type: string
          description: "Error message"

    UnionApiErrorBadRequest:
      required:
        - code
        - message
      type: object
      properties:
        code:
          type: string
          enum:
            - BAD_REQUEST
            - VALIDATION
          default: BAD_REQUEST
        message:
          type: string
          description: "Error message"

    UnionApiErrorServerError:
      required:
        - code
        - message
      type: object
      properties:
        code:
          type: string
          enum:
            - UNKNOWN
          default: UNKNOWN
        message:
          type: string
          description: "Error message"

    #################### Order - Eth ####################

    EthOrderDataLegacy:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - ETH_RARIBLE_V1
        fee:
          $ref: "#/components/schemas/BigInteger"
      required:
        - fee
        - "@type"

    TezosOrderDataRaribleV2DataV1:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - TEZOS_RARIBLE_V2
        payouts:
          type: array
          default: [ ]
          items:
            $ref: "#/components/schemas/Payout"
        originFees:
          type: array
          default: [ ]
          items:
            $ref: "#/components/schemas/Payout"
        makerEdpk:
          type: string
        takerEdpk:
          type: string
      required:
        - "@type"
        - payouts
        - originFees

    TezosOrderDataRaribleV2DataV2:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - TEZOS_RARIBLE_V3
        payouts:
          type: array
          default: [ ]
          items:
            $ref: "#/components/schemas/Payout"
        originFees:
          type: array
          default: [ ]
          items:
            $ref: "#/components/schemas/Payout"
        makerEdpk:
          type: string
        takerEdpk:
          type: string
      required:
        - "@type"
        - payouts
        - originFees

    EthOrderDataRaribleV2DataV1:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - ETH_RARIBLE_V2
        payouts:
          type: array
          default: [ ]
          items:
            $ref: "#/components/schemas/Payout"
        originFees:
          type: array
          default: [ ]
          items:
            $ref: "#/components/schemas/Payout"
      required:
        - "@type"
        - payouts
        - originFees

    EthOrderDataRaribleV2DataV3Sell:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - ETH_RARIBLE_V2_DATA_V3_SELL
        payout:
          $ref: "#/components/schemas/Payout"
        originFeeFirst:
          $ref: "#/components/schemas/Payout"
        originFeeSecond:
          $ref: "#/components/schemas/Payout"
        maxFeesBasePoint:
          type: integer
        marketplaceMarker:
          type: string
      required:
        - "@type"
        - maxFeesBasePoint

    EthOrderDataRaribleV2DataV3Buy:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - ETH_RARIBLE_V2_DATA_V3_BUY
        payout:
          $ref: "#/components/schemas/Payout"
        originFeeFirst:
          $ref: "#/components/schemas/Payout"
        originFeeSecond:
          $ref: "#/components/schemas/Payout"
        marketplaceMarker:
          type: string
      required:
        - "@type"

    EthOrderOpenSeaV1DataV1:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - ETH_OPEN_SEA_V1
        exchange:
          $ref: "#/components/schemas/Address"
        makerRelayerFee:
          $ref: "#/components/schemas/BigInteger"
        takerRelayerFee:
          $ref: "#/components/schemas/BigInteger"
        makerProtocolFee:
          $ref: "#/components/schemas/BigInteger"
        takerProtocolFee:
          $ref: "#/components/schemas/BigInteger"
        feeRecipient:
          $ref: "#/components/schemas/Address"
        feeMethod:
          type: string
          enum:
            - PROTOCOL_FEE
            - SPLIT_FEE
        side:
          type: string
          enum:
            - BUY
            - SELL
        saleKind:
          type: string
          enum:
            - FIXED_PRICE
            - DUTCH_AUCTION
        howToCall:
          type: string
          enum:
            - CALL
            - DELEGATE_CALL
        callData:
          type: string
        replacementPattern:
          type: string
        staticTarget:
          $ref: "#/components/schemas/Address"
        staticExtraData:
          type: string
        extra:
          $ref: "#/components/schemas/BigInteger"
      required:
        - "@type"
        - dataType
        - exchange
        - makerRelayerFee
        - takerRelayerFee
        - makerProtocolFee
        - takerProtocolFee
        - feeRecipient
        - feeMethod
        - side
        - saleKind
        - howToCall
        - callData
        - replacementPattern
        - staticTarget
        - staticExtraData
        - extra

    EthOrderCryptoPunksData:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - ETH_CRYPTO_PUNKS
        stub:
          type: string
          default: "STUB"
      required:
        - "@type"

    EthSeaportOrderType:
      type: string
      enum:
        - FULL_OPEN
        - PARTIAL_OPEN
        - FULL_RESTRICTED
        - PARTIAL_RESTRICTED

    EthSeaportItemType:
      type: string
      enum:
        - NATIVE
        - ERC20
        - ERC721
        - ERC1155
        - ERC721_WITH_CRITERIA
        - ERC1155_WITH_CRITERIA

    EthSeaportOffer:
      type: object
      properties:
        itemType:
          $ref: "#/components/schemas/EthSeaportItemType"
        token:
          $ref: "#/components/schemas/Address"
        identifierOrCriteria:
          $ref: "#/components/schemas/BigInteger"
        startAmount:
          $ref: "#/components/schemas/BigInteger"
        endAmount:
          $ref: "#/components/schemas/BigInteger"
      required:
        - itemType
        - token
        - identifierOrCriteria
        - startAmount
        - endAmount

    EthSeaportConsideration:
      type: object
      properties:
        itemType:
          $ref: "#/components/schemas/EthSeaportItemType"
        token:
          $ref: "#/components/schemas/Address"
        identifierOrCriteria:
          $ref: "#/components/schemas/BigInteger"
        startAmount:
          $ref: "#/components/schemas/BigInteger"
        endAmount:
          $ref: "#/components/schemas/BigInteger"
        recipient:
          $ref: "#/components/schemas/Address"
      required:
        - itemType
        - token
        - identifierOrCriteria
        - startAmount
        - endAmount
        - recipient

    EthOrderSeaportDataV1:
      type: object
      properties:
        protocol:
          $ref: "#/components/schemas/Address"
        orderType:
          $ref: "#/components/schemas/EthSeaportOrderType"
        offer:
          type: array
          items:
            $ref: "#/components/schemas/EthSeaportOffer"
        consideration:
          type: array
          items:
            $ref: "#/components/schemas/EthSeaportConsideration"
        zone:
          $ref: "#/components/schemas/Address"
        zoneHash:
          type: string
        conduitKey:
          type: string
        counter:
          type: integer
          format: int64
      required:
        - protocol
        - orderType
        - offer
        - consideration
        - zone
        - zoneHash
        - conduitKey
        - counter
      oneOf:
        - "$ref": "#/components/schemas/EthOrderBasicSeaportDataV1"

    EthOrderBasicSeaportDataV1:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - ETH_BASIC_SEAPORT_DATA_V1
      required:
        - "@type"

    OnChainOrder:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - ON_CHAIN_ORDER
      required:
        - "@type"

    Asset:
      type: object
      properties:
        type:
          $ref: "#/components/schemas/AssetType"
        value:
          $ref: "#/components/schemas/BigDecimal"
      required:
        - type
        - value

    AssetType:
      type: object
      oneOf:
        - $ref: "#/components/schemas/FlowAssetTypeNft"
        - $ref: "#/components/schemas/FlowAssetTypeFt"
        - $ref: "#/components/schemas/TezosXTZAssetType"
        - $ref: "#/components/schemas/TezosFTAssetType"
        - $ref: "#/components/schemas/TezosNFTAssetType"
        - $ref: "#/components/schemas/TezosMTAssetType"
        - $ref: "#/components/schemas/EthEthereumAssetType"
        - $ref: "#/components/schemas/EthErc20AssetType"
        - $ref: "#/components/schemas/EthErc721AssetType"
        - $ref: "#/components/schemas/EthErc721LazyAssetType"
        - $ref: "#/components/schemas/EthErc1155AssetType"
        - $ref: "#/components/schemas/EthErc1155LazyAssetType"
        - $ref: "#/components/schemas/EthCryptoPunksAssetType"
        - $ref: "#/components/schemas/EthGenerativeArtAssetType"
        - $ref: "#/components/schemas/EthCollectionAssetType"
        - $ref: "#/components/schemas/SolanaNftAssetType"
        - $ref: "#/components/schemas/SolanaFtAssetType"
        - $ref: "#/components/schemas/SolanaSolAssetType"

    TezosXTZAssetType:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - XTZ
      required:
        - "@type"

    TezosFTAssetType:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - TEZOS_FT
        contract:
          $ref: "#/components/schemas/ContractAddress"
        tokenId:
          $ref: "#/components/schemas/BigInteger"
      required:
        - "@type"
        - contract

    TezosNFTAssetType:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - TEZOS_NFT
        contract:
          $ref: "#/components/schemas/ContractAddress"
        tokenId:
          $ref: "#/components/schemas/BigInteger"
      required:
        - "@type"
        - contract
        - tokenId

    TezosMTAssetType:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - TEZOS_MT
        contract:
          $ref: "#/components/schemas/ContractAddress"
        tokenId:
          $ref: "#/components/schemas/BigInteger"
      required:
        - "@type"
        - contract
        - tokenId

    FlowAssetTypeNft:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - FLOW_NFT
        contract:
          $ref: "#/components/schemas/ContractAddress"
        tokenId:
          $ref: "#/components/schemas/BigInteger"
      required:
        - "@type"
        - tokenId
        - contract

    FlowAssetTypeFt:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - FLOW_FT
        contract:
          $ref: "#/components/schemas/ContractAddress"
      required:
        - "@type"
        - contract

    EthEthereumAssetType:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - ETH
        blockchain:
          $ref: "#/components/schemas/Blockchain"
      required:
        - "@type"

    EthErc20AssetType:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - ERC20
        contract:
          $ref: "#/components/schemas/ContractAddress"
      required:
        - "@type"
        - contract

    EthErc721AssetType:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - ERC721
        contract:
          $ref: "#/components/schemas/ContractAddress"
        tokenId:
          $ref: "#/components/schemas/BigInteger"
      required:
        - "@type"
        - contract
        - tokenId

    EthErc721LazyAssetType:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - ERC721_Lazy
        contract:
          $ref: "#/components/schemas/ContractAddress"
        tokenId:
          $ref: "#/components/schemas/BigInteger"
        uri:
          type: string
        creators:
          type: array
          description: "Creators of the target item"
          default: [ ]
          items:
            $ref: "#/components/schemas/Creator"
        royalties:
          type: array
          default: [ ]
          items:
            $ref: "#/components/schemas/Royalty"
        signatures:
          type: array
          default: [ ]
          items:
            type: string
      required:
        - "@type"
        - contract
        - tokenId
        - uri
        - creators
        - royalties
        - signatures

    EthErc1155AssetType:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - ERC1155
        contract:
          $ref: "#/components/schemas/ContractAddress"
        tokenId:
          $ref: "#/components/schemas/BigInteger"
      required:
        - "@type"
        - contract
        - tokenId

    EthErc1155LazyAssetType:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - ERC1155_Lazy
        contract:
          $ref: "#/components/schemas/ContractAddress"
        tokenId:
          $ref: "#/components/schemas/BigInteger"
        uri:
          type: string
        supply:
          $ref: "#/components/schemas/BigInteger"
        creators:
          type: array
          description: "Creators of the target item"
          default: [ ]
          items:
            $ref: "#/components/schemas/Creator"
        royalties:
          type: array
          default: [ ]
          items:
            $ref: "#/components/schemas/Royalty"
        signatures:
          type: array
          default: [ ]
          items:
            type: string
      required:
        - "@type"
        - contract
        - tokenId
        - uri
        - creators
        - supply
        - royalties
        - signatures

    EthCryptoPunksAssetType:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - "CRYPTO_PUNKS"
        contract:
          $ref: "#/components/schemas/ContractAddress"
        tokenId:
          type: integer
      required:
        - "@type"
        - contract
        - tokenId

    EthGenerativeArtAssetType:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - "GEN_ART"
        contract:
          $ref: "#/components/schemas/ContractAddress"
      required:
        - "@type"
        - contract

    EthCollectionAssetType:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - "COLLECTION"
        contract:
          $ref: "#/components/schemas/ContractAddress"
      required:
        - "@type"
        - contract

    SolanaNftAssetType:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - SOLANA_NFT
        itemId:
          $ref: "#/components/schemas/ItemId"
      required:
        - "@type"
        - itemId

    SolanaFtAssetType:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - SOLANA_FT
        address:
          $ref: "#/components/schemas/ContractAddress"
      required:
        - "@type"
        - address

    SolanaSolAssetType:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - SOLANA_SOL
      required:
        - "@type"

    #################### Order - Flow ####################

    FlowOrderDataV1:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - FLOW_RARIBLE_V1
        payouts:
          type: array
          default: [ ]
          items:
            $ref: "#/components/schemas/Payout"
        originFees:
          type: array
          default: [ ]
          items:
            $ref: "#/components/schemas/Payout"
      required:
        - "@type"
        - payouts
        - originFees

    #################### Order - Immutablex ####################

    ImmutablexOrderDataV1:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - IMMUTABLEX_RARIBLE_V1
        payouts:
          type: array
          default: [ ]
          items:
            $ref: "#/components/schemas/Payout"
        originFees:
          type: array
          default: [ ]
          items:
            $ref: "#/components/schemas/Payout"
      required:
        - "@type"
        - payouts
        - originFees

    #################### Order - Solana ####################

    SolanaAuctionHouseDataV1:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - SOLANA_AUCTION_HOUSE_V1
        fee:
          type: integer
        requiresSignOff:
          type: boolean
        auctionHouse:
          $ref: "#/components/schemas/ContractAddress"
      required:
        - "@type"

    #======================== Other – For Search ============================#

    SearchDate:
      type: object
      properties:
        date:
          type: string
          format: date-time
        operator:
          $ref: "#/components/schemas/ComparisonOperator"

    SearchBigDecimal:
      type: object
      properties:
        value:
          $ref: "#/components/schemas/BigDecimal"
        operator:
          $ref: "#/components/schemas/ComparisonOperator"

    SearchBigInteger:
      type: object
      properties:
        value:
          $ref: "#/components/schemas/BigInteger"
        operator:
          $ref: "#/components/schemas/ComparisonOperator"

    ComparisonOperator:
      default: EQUAL
      type: string
      enum:
        - EQUAL
        - GREATER
        - LESS
        - GREATER_OR_EQUAL
        - LESS_OR_EQUAL
        - NOT_EQUAL

    #################### Subscription-related ####################

    SubscriptionAction:
      type: string
      enum:
        - SUBSCRIBE
        - UNSUBSCRIBE

    SubscriptionRequest:
      type: object
      properties:
        action:
          $ref: "#/components/schemas/SubscriptionAction"
      required:
        - action
      oneOf:
        - $ref: "#/components/schemas/ItemSubscriptionRequest"
        - $ref: "#/components/schemas/OwnershipSubscriptionRequest"

    ItemSubscriptionRequest:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - ITEM
        id:
            $ref: "#/components/schemas/ItemId"
      required:
        - "@type"
        - id

    OwnershipSubscriptionRequest:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - OWNERSHIP
        id:
            $ref: "#/components/schemas/OwnershipId"
      required:
        - "@type"
        - id

    SubscriptionActivity:
      type: object
      oneOf:
        - $ref: "#/components/schemas/FakeSubscriptionActivity"
        - $ref: "#/components/schemas/ItemSubscriptionActivity"
        - $ref: "#/components/schemas/OwnershipSubscriptionActivity"

    FakeSubscriptionActivity:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - FAKE
      required:
        - "@type"

    ItemSubscriptionActivity:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - ITEM
        value:
          $ref: "#/components/schemas/ItemActivity"
      required:
        - "@type"
        - value

    OwnershipSubscriptionActivity:
      type: object
      properties:
        "@type":
          type: string
          enum:
            - OWNERSHIP
        value:
          $ref: "#/components/schemas/OwnershipActivity"
      required:
        - "@type"
        - value

    #################### Referenced Types ####################

    BigInteger:
      type: string
      example: 123456

    BigDecimal:
      type: string
      example: 123456.789

    ContractAddress:
      type: string
      description: "Blockchain contract address, format is `${blockchainType}.${chain}:${address}`"
      example: "EVM.1:0xd07dc4262bcdbf85190c01c996b4c06a461d2430"

    Address:
      type: string
      description: "Blockchain address, format `${blockchainType}:${address}`"
      example: "${userId}"

  #======================== Responses ============================#

  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/UnionApiErrorBadRequest"
    ServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/UnionApiErrorServerError"
    EntityNotFound:
      description: Not Found
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/UnionApiErrorEntityNotFound"
